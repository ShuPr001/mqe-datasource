{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;AA+JA;AACA;AACA;AACA;AACA,WAAS,YAAT,CAAsB,KAAtB,EAA6B;AAC3B,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAO,KAAP;AACD;AACD,WAAO,MAAM,IAAN,CAAW,MAAX,CAAP;AACD;;AAED,WAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC/B,QAAI,kBAAkB,0BAAtB;AACA,QAAI,iBAAiB,gBAAgB,IAAhB,CAAqB,QAArB,CAArB;AACA,WAAO,OAAO,QAAP,CAAgB,OAAO,eAAe,CAAf,CAAP,CAAhB,EAA2C,eAAe,CAAf,CAA3C,EAA8D,OAA9D,EAAP;AACD;;;AA9KM,O;;AACK,c;;AACL,Y;;AACA,c;;AACK,sB;;;;;;;;;;;;;;;;;;;;;+BAEC,a;AAEX,+BAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C,WAA9C,EAA2D;AAAA;;AACzD,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,EAAL,GAAU,EAAV;AACA,eAAK,UAAL,GAAkB,UAAlB;AACA,eAAK,WAAL,GAAmB,WAAnB;AACA,eAAK,WAAL,CAAiB,WAAjB,GAA+B,YAA/B;;AAEA;AACA,cAAI,WAAY,iBAAiB,QAAjB,CAA0B,QAA1B,IAAsC,KAAtD;AACA,eAAK,QAAL,GAAgB,cAAc,QAAd,CAAhB;AACA,eAAK,KAAL,GAAa,EAAb;AAED;;AAED;;;;;gCACM,O,EAAS;AAAA;;AACb,gBAAI,WAAW,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,KAAR,CAAc,IAA7B,CAAV,CAAf;AACA,gBAAI,SAAS,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,KAAR,CAAc,EAA7B,CAAV,CAAb;AACA,gBAAI,QAAJ,EACI,eADJ;AAEA,gBAAI,OAAO,IAAX;;AAEA,gBAAI,UAAU,EAAE,GAAF,CAAM,QAAQ,OAAd,EAAuB,kBAAU;AAC7C,kBAAI,OAAO,IAAP,IAAgB,OAAO,QAAP,IAAmB,CAAC,OAAO,KAA/C,EAAuD;AACrD,uBAAO,EAAP;AACD,eAFD,MAEO;AACL,oBAAI,OAAO,QAAX,EAAqB;AACnB;AACA,6BAAW,SAAS,YAAT,CAAsB,OAAO,KAA7B,EAAoC,QAApC,EAA8C,MAA9C,CAAX;;AAEA;AACA,oCAAkB,MAAK,EAAL,CAAQ,IAAR,CAAa,CAAC,QAAD,CAAb,CAAlB;AACD,iBAND,MAMO;;AAEL;AACA,sBAAI,aAAa,IAAI,QAAJ,CAAa,MAAb,EAAqB,MAAK,WAA1B,EAAuC,QAAQ,UAA/C,CAAjB;AACA,oCAAkB,MAAK,YAAL,CAAkB,SAAlB,EAA6B,IAA7B,CAAkC,mBAAW;AAC7D,2BAAO,WAAW,MAAX,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC,MAArC,CAAP;AACD,mBAFiB,CAAlB;AAGD;;AAED,uBAAO,gBAAgB,IAAhB,CAAqB,sBAAc;AACxC,sBAAI,gBAAgB,EAAE,GAAF,CAAM,UAAN,EAAkB,oBAAY;AAChD,+BAAW,KAAK,WAAL,CAAiB,OAAjB,CAAyB,QAAzB,EAAmC,QAAQ,UAA3C,CAAX;;AAEA,2BAAO,KAAK,UAAL,CAAgB,QAAhB,EAA0B,IAA1B,CAA+B,oBAAY;AAChD,6BAAO,iBAAiB,eAAjB,CAAiC,MAAjC,EAAyC,QAAzC,CAAP;AACD,qBAFM,CAAP;AAGD,mBANmB,CAApB;AAOA,yBAAO,KAAK,EAAL,CAAQ,GAAR,CAAY,aAAZ,CAAP;AACD,iBATM,CAAP;AAUD;AACF,aA9Ba,CAAd;AA+BA,mBAAO,KAAK,EAAL,CAAQ,GAAR,CAAY,EAAE,OAAF,CAAU,OAAV,CAAZ,EAAgC,IAAhC,CAAqC,kBAAU;AACpD,qBAAO;AACL,sBAAM,EAAE,OAAF,CAAU,MAAV;AADD,eAAP;AAGD,aAJM,CAAP;AAKD;;;2CAIgB;AACf,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,GADuB;AAEvC,sBAAQ;AAF+B,aAAlC,EAGJ,IAHI,CAGC,oBAAY;AAClB,kBAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO;AACL,0BAAQ,SADH;AAEL,2BAAS,kBAFJ;AAGL,yBAAO;AAHF,iBAAP;AAKD;AACF,aAXM,CAAP;AAYD;;;0CAEe,K,EAAO;AACrB,gBAAI,CAAC,KAAL,EAAY;AACV,qBAAO,KAAK,EAAL,CAAQ,IAAR,CAAa,EAAb,CAAP;AACD;;AAED,oBAAQ,KAAK,WAAL,CAAiB,OAAjB,CAAyB,KAAzB,CAAR;AACA,mBAAO,KAAK,YAAL,CAAkB,KAAlB,EAAyB,IAAzB,CAA8B,kBAAU;AAC7C,qBAAO,EAAE,GAAF,CAAM,MAAN,EAAc,kBAAU;AAC7B,uBAAO;AACL,wBAAM,MADD;AAEL,yBAAO;AAFF,iBAAP;AAID,eALM,CAAP;AAMD,aAPM,CAAP;AAQD;;;uCAIY,K,EAAO;AAAA;;AAClB,gBAAI,qBAAJ;;AAEA,gBAAI,CAAC,KAAK,KAAL,CAAW,KAAZ,IACA,KAAK,GAAL,KAAa,KAAK,KAAL,CAAW,KAAX,CAAiB,SAA9B,GAA0C,KAAK,QADnD,EAC6D;;AAE3D,6BAAe,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,CAA0B,oBAAY;AACnD,uBAAK,KAAL,CAAW,KAAX,GAAmB;AACjB,6BAAW,KAAK,GAAL,EADM;AAEjB,yBAAO,SAAS;AAFC,iBAAnB;AAIA,uBAAO,SAAS,IAAhB;AACD,eANc,CAAf;AAOD,aAVD,MAUO;AACL,6BAAe,KAAK,EAAL,CAAQ,IAAR,CAAa,KAAK,KAAL,CAAW,KAAX,CAAiB,KAA9B,CAAf;AACD;;AAED,mBAAO,aAAa,IAAb,CAAkB,kBAAU;AACjC,qBAAO,iBAAiB,uBAAjB,CAAyC,KAAzC,EAAgD,MAAhD,CAAP;AACD,aAFM,CAAP;AAGD;;;qCAEU,K,EAAO;AAChB,gBAAI,YAAY;AACd,qBAAO;AADO,aAAhB;AAGA,mBAAO,KAAK,KAAL,CAAW,SAAX,EAAsB,SAAtB,EAAiC,IAAjC,CAAsC,oBAAY;AACvD,qBAAO,SAAS,IAAhB;AACD,aAFM,CAAP;AAGD;;;+BAEI,G,EAAK;AACR,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,GADuB;AAEvC,sBAAQ,KAF+B;AAGvC,uBAAS;AACP,gCAAgB;AADT;AAH8B,aAAlC,CAAP;AAOD;;;gCAEK,G,EAAK,I,EAAM;AACf,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,GADuB;AAEvC,oBAAM,IAFiC;AAGvC,sBAAQ,MAH+B;AAIvC,uBAAS;AACP,gCAAgB;AADT;AAJ8B,aAAlC,CAAP;AAQD","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport moment from 'moment';\nimport MQEQuery from './query_builder';\nimport * as response_handler from './response_handler';\n\nexport class MQEDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.templateSrv.formatValue = formatMQETag;\n\n    // Default is 10 minutes\n    let cacheTTL =  instanceSettings.jsonData.cacheTTL || '10m';\n    this.cacheTTL = parseInterval(cacheTTL);\n    this.cache = {};\n\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.range.from));\n    var timeTo = Math.ceil(dateMath.parse(options.range.to));\n    var mqeQuery,\n        mqeQueryPromise;\n    var self = this;\n\n    var queries = _.map(options.targets, target => {\n      if (target.hide || (target.rawQuery && !target.query)) {\n        return [];\n      } else {\n        if (target.rawQuery) {\n          // Use raw query\n          mqeQuery = MQEQuery.addTimeRange(target.query, timeFrom, timeTo);\n\n          // Return query in async manner\n          mqeQueryPromise = this.$q.when([mqeQuery]);\n        } else {\n\n          // Build query\n          var queryModel = new MQEQuery(target, this.templateSrv, options.scopedVars);\n          mqeQueryPromise = this._mqe_explore('metrics').then(metrics => {\n            return queryModel.render(metrics, timeFrom, timeTo);\n          });\n        }\n\n        return mqeQueryPromise.then(mqeQueries => {\n          var queryPromises = _.map(mqeQueries, mqeQuery => {\n            mqeQuery = self.templateSrv.replace(mqeQuery, options.scopedVars);\n\n            return self._mqe_query(mqeQuery).then(response => {\n              return response_handler.handle_response(target, response);\n            });\n          });\n          return self.$q.all(queryPromises);\n        });\n      }\n    });\n    return this.$q.all(_.flatten(queries)).then(result => {\n      return {\n        data: _.flatten(result)\n      };\n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Connected to MQE\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    query = this.templateSrv.replace(query);\n    return this._mqe_explore(query).then(result => {\n      return _.map(result, metric => {\n        return {\n          text: metric,\n          value: metric\n        };\n      });\n    });\n  }\n\n  // Invoke GET request to /token endpoint and returns list of metrics.\n  // For Staples only.\n  _mqe_explore(query) {\n    let tokenRequest;\n\n    if (!this.cache.token ||\n        Date.now() - this.cache.token.timestamp > this.cacheTTL) {\n\n      tokenRequest = this._get('/token/').then(response => {\n        this.cache.token = {\n          timestamp: Date.now(),\n          value: response.data\n        };\n        return response.data;\n      });\n    } else {\n      tokenRequest = this.$q.when(this.cache.token.value);\n    }\n\n    return tokenRequest.then(result => {\n      return response_handler.handle_explore_response(query, result);\n    });\n  }\n\n  _mqe_query(query) {\n    var mqe_query = {\n      query: query\n    };\n    return this._post('/query/', mqe_query).then(response => {\n      return response.data;\n    });\n  }\n\n  _get(url) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + url,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  _post(url, data) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + url,\n      data: data,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n}\n\n// Special value formatter for MQE.\n// Render multi-value variables for using in \"IN\" expression:\n// $host => ('backend01', 'backend02')\n// where host in $host => where host in ('backend01', 'backend02')\nfunction formatMQETag(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return value.join(\"', '\");\n}\n\nfunction parseInterval(interval) {\n  var intervalPattern = /(^[\\d]+)(y|M|w|d|h|m|s)/g;\n  var momentInterval = intervalPattern.exec(interval);\n  return moment.duration(Number(momentInterval[1]), momentInterval[2]).valueOf();\n}"]}