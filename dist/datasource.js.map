{"version":3,"sources":["../src/datasource.js"],"names":["formatMQETag","value","join","parseInterval","interval","intervalPattern","momentInterval","exec","moment","duration","Number","valueOf","_","dateMath","MQEQuery","response_handler","MQEDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","formatValue","cacheTTL","jsonData","cache","options","timeFrom","Math","ceil","parse","range","from","timeTo","to","mqeQuery","mqeQueryPromise","self","queries","map","targets","target","hide","rawQuery","query","addTimeRange","replace","scopedVars","when","queryModel","_mqe_explore","then","render","metrics","queryPromises","mqeQueries","_mqe_query","handle_response","response","all","flatten","data","result","datasourceRequest","method","status","message","title","text","metric","tokenRequest","token","Date","now","timestamp","_get","handle_explore_response","mqe_query","_post","headers"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport moment from 'moment';\nimport MQEQuery from './query_builder';\nimport * as response_handler from './response_handler';\n\nexport class MQEDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.templateSrv.formatValue = formatMQETag;\n\n    // Default is 10 minutes\n    let cacheTTL =  instanceSettings.jsonData.cacheTTL || '10m';\n    this.cacheTTL = parseInterval(cacheTTL);\n    this.cache = {};\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.range.from));\n    var timeTo = Math.ceil(dateMath.parse(options.range.to));\n    var mqeQuery,\n        mqeQueryPromise;\n    var self = this;\n\n    var queries = _.map(options.targets, target => {\n      if (target.hide || (target.rawQuery && !target.query)) {\n        return [];\n      } else {\n        if (target.rawQuery) {\n          // Use raw query\n          mqeQuery = MQEQuery.addTimeRange(target.query, timeFrom, timeTo);\n          //if raw query contains the template variable like, $hosts or $cluster, expand it\n          mqeQuery = self.templateSrv.replace(mqeQuery, options.scopedVars);\n          // Return query in async manner\n          mqeQueryPromise = this.$q.when([mqeQuery]);\n        } else {\n\n          // Build query\n          var queryModel = new MQEQuery(target, this.templateSrv, options.scopedVars);\n          mqeQueryPromise = this._mqe_explore('metrics').then(metrics => {\n            return queryModel.render(metrics, timeFrom, timeTo);\n          });\n        }\n\n        return mqeQueryPromise.then(mqeQueries => {\n          var queryPromises = _.map(mqeQueries, mqeQuery => {\n            mqeQuery = self.templateSrv.replace(mqeQuery, options.scopedVars);\n\n            return self._mqe_query(mqeQuery).then(response => {\n              return response_handler.handle_response(target, response);\n            });\n          });\n          return self.$q.all(queryPromises);\n        });\n      }\n    });\n    return this.$q.all(_.flatten(queries)).then(result => {\n      return {\n        data: _.flatten(result)\n      };\n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Connected to MQE\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    query = this.templateSrv.replace(query);\n    return this._mqe_explore(query).then(result => {\n      return _.map(result, metric => {\n        return {\n          text: metric,\n          value: metric\n        };\n      });\n    });\n  }\n\n  // Invoke GET request to /token endpoint and returns list of metrics.\n  // For Staples only.\n  _mqe_explore(query) {\n    let tokenRequest;\n\n    if (!this.cache.token ||\n        Date.now() - this.cache.token.timestamp > this.cacheTTL) {\n\n      tokenRequest = this._get('/token/').then(response => {\n        this.cache.token = {\n          timestamp: Date.now(),\n          value: response.data\n        };\n        return response.data;\n      });\n    } else {\n      tokenRequest = this.$q.when(this.cache.token.value);\n    }\n\n    return tokenRequest.then(result => {\n      return response_handler.handle_explore_response(query, result);\n    });\n  }\n\n  _mqe_query(query) {\n    var mqe_query = {\n      query: query\n    };\n    return this._post('/query/', mqe_query).then(response => {\n      return response.data;\n    });\n  }\n\n  _get(url) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + url,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  _post(url, data) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + url,\n      data: data,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n}\n\n// Special value formatter for MQE.\n// Render multi-value variables for using in \"IN\" expression:\n// $host => ('backend01', 'backend02')\n// where host in $host => where host in ('backend01', 'backend02')\nfunction formatMQETag(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return value.join(\"', '\");\n}\n\nfunction parseInterval(interval) {\n  var intervalPattern = /(^[\\d]+)(y|M|w|d|h|m|s)/g;\n  var momentInterval = intervalPattern.exec(interval);\n  return moment.duration(Number(momentInterval[1]), momentInterval[2]).valueOf();\n}"]}