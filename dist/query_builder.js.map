{"version":3,"sources":["../src/query_builder.js"],"names":["containsWildcard","str","wildcardRegex","test","containsIndex","getAliasIndexArray","replace","trim","indices","split","i","length","parseInt","getMetricSplits","metricSplits","getCustomAliasName","aliasString","index","slice","convertMetricWithIndex","metric","suffix","addMQEAlias","wrapMetric","filterMetrics","metrics","filterRegex","RegExp","_","filter","search","trimRegex","match","convertMetricWithWildcard","metricQuery","getMetricSuffix","metricPrefix","suffixRegex","exec","alias","wrapTag","tag","formatMQEMetric","value","format","variable","join","MQEQuery","target","templateSrv","scopedVars","metricList","timeFrom","timeTo","interval","m","filteredMetrics","map","partial","compose","concat","uniq","query","formatValueOriginal","formatValue","functions","addFunctions","renderWhere","apps","hosts","addTimeRange","forEach","fn","whereClauses","renderedClauses","clauseObj","rendered","condition","isNumber","containsVariable","column","operator","variables","self","some","timeRangeRegex"],"mappings":"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","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\n\nexport default class MQEQuery {\n\n  /** @ngInject */\n  constructor(target, templateSrv, scopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    // this.templateSrv.formatValue = formatMQEMetric;\n    this.scopedVars = scopedVars;\n  }\n\n  /////////////////////\n  // Query Rendering //\n  /////////////////////\n\n  render(metricList, timeFrom, timeTo, interval) {\n    let target = this.target;\n    let metrics = [];\n\n    for (let m of target.metrics) {\n      let metric = m.metric;\n      if (metric) {\n        if (containsWildcard(metric)) {\n          let filteredMetrics = filterMetrics(metric, metricList);\n\n          // Add alias\n          if (m.alias) {\n            if (containsWildcard(m.alias)) {\n              // Set whildcard part as metric alias\n              // query: os.cpu.* alias: * -> metric: os.cpu.system -> alias: system\n              filteredMetrics = _.map(filteredMetrics,\n                _.partial(convertMetricWithWildcard, metric));\n            } else if(containsIndex(m.alias)){\n                // query: springboot.gauge.* (the  metric can be very lengthy like below)\n                // metric: springboot.gauge.hystrix.HystrixThreadPool.GP-API-TIERC-PRODUCT.reportingHosts\n                // alias: $6 ie show only reportingHosts\n                var indices = getAliasIndexArray(m.alias);\n                filteredMetrics = _.map(filteredMetrics, _.partial(convertMetricWithIndex, indices));\n            }\n            else {\n              filteredMetrics = _.map(filteredMetrics,\n                _.compose(_.partial(addMQEAlias, m.alias), wrapMetric));\n            }\n          } else {\n            filteredMetrics = _.map(filteredMetrics, wrapMetric);\n          }\n\n          metrics = metrics.concat(filteredMetrics);\n        } else {\n          metric = wrapMetric(metric);\n\n          // Add alias\n          if (m.alias) {\n            metric = addMQEAlias(m.alias, metric);\n          }\n\n          metrics = metrics.concat(metric);\n        }\n      }\n    }\n    metrics = _.uniq(metrics);\n\n    return _.map(metrics, metric => {\n      let query = \"\";\n\n      // Set custom metric format function\n      let formatValueOriginal = this.templateSrv.formatValue;\n      this.templateSrv.formatValue = formatMQEMetric;\n      metric = this.templateSrv.replace(metric, this.scopedVars);\n\n      // Set original format function\n      this.templateSrv.formatValue = formatValueOriginal;\n\n      query += metric;\n\n      // Render functions if any\n      if(target.functions && target.functions.length) {\n        query += this.addFunctions(target.functions);\n      }\n\n      // Render apps and hosts\n      query += this.renderWhere(target.apps, target.hosts);\n\n      query = MQEQuery.addTimeRange(query, timeFrom, timeTo);\n      return query;\n    });\n  }\n\n  addFunctions(functions) {\n    var query = \"\";\n    if (functions.length) {\n      _.forEach(functions, function (fn) {\n        query += \"|\" + fn + \" \";\n      });\n    }\n    return query;\n  }\n  renderWhere(apps, hosts) {\n    let query = \"\";\n    if (apps.length || hosts.length) {\n      query += \" where \";\n      if (apps.length) {\n        query += \"app in (\" + _.map(apps, wrapTag).join(', ') + \")\";\n        if (hosts.length)  {\n          query += \" and \";\n        }\n      }\n      if (hosts.length) {\n        query += \"host in (\" + _.map(hosts, wrapTag).join(', ') + \")\";\n      }\n    }\n    return query;\n  }\n\n  renderWhereClauses(whereClauses) {\n    var renderedClauses = _.map(whereClauses, (clauseObj, index) => {\n      var rendered = \"\";\n      if (index !== 0) {\n        rendered += clauseObj.condition + \" \";\n      }\n\n      // Put non-numeric values into quotes.\n      var value;\n      if (_.isNumber(clauseObj.value) ||\n          this.containsVariable(clauseObj.value)) {\n        value = clauseObj.value;\n      } else {\n        value = \"'\" + clauseObj.value + \"'\";\n      }\n      rendered += clauseObj.column + ' ' + clauseObj.operator + ' ' + value;\n      return rendered;\n    });\n    return renderedClauses.join(' ');\n  }\n\n  // Check for template variables\n  containsVariable(str) {\n    var variables = _.map(this.templateSrv.variables, 'name');\n    var self = this;\n    return _.some(variables, variable => {\n      return self.templateSrv.containsVariable(str, variable);\n    });\n  }\n\n  ////////////////////\n  // Static methods //\n  ////////////////////\n\n  static getMetrics() {\n    var query = \"describe all\";\n    return query;\n  }\n\n  static getColumns(metric) {\n    return \"describe \" + metric;\n  }\n\n  static addTimeRange(query, timeFrom, timeTo, interval) {\n    var timeRangeRegex = /from.*to/;\n    if(!timeRangeRegex.test(query)) {\n      query = trim(query) + \" from \" + timeFrom + \" to \" + timeTo;\n    }\n    return query;\n  }\n}\n\nfunction containsWildcard(str) {\n  var wildcardRegex = /\\*/;\n  return wildcardRegex.test(str);\n}\n\nfunction containsIndex(str) {\n    var wildcardRegex = /\\$/;\n    return wildcardRegex.test(str);\n}\n\nfunction getAliasIndexArray(str) {\n    // replace all the $ with space\n    // convert it to list\n    str = str.replace(/\\$/g, ' ');\n    str = str.trim();\n    var indices = str.split(' ');\n    for(var i=0; i<indices.length; i++) {\n        indices[i] = parseInt(indices[i], 10);\n    }\n    return indices;\n}\n\nfunction getMetricSplits(str) {\n    var metricSplits = str.split('.');\n    return (metricSplits);\n\n}\n\nfunction getCustomAliasName(metricSplits, indices) {\n    var aliasString = \"\";\n    for( var i = 0; i<indices.length; i++) {\n        var index = indices[i]-1;\n        if(index >= 0 && index <  metricSplits.length) {\n\n            aliasString += metricSplits[indices[i] - 1] + \".\";\n        }\n    }\n    return aliasString.slice(0, -1);\n}\n\nfunction convertMetricWithIndex(indices, metric) {\n    var suffix = getCustomAliasName(getMetricSplits(metric),indices);\n    return addMQEAlias(suffix, wrapMetric(metric));\n}\n\nfunction filterMetrics(str, metrics) {\n  str = str.replace(/\\./g, '\\\\\\.');\n  let filterRegex = new RegExp(str.replace('*', '.*'), 'g');\n  return _.filter(metrics, metric => {\n    return metric.search(filterRegex) !== -1;\n  });\n}\n\nfunction trim(str) {\n  var trimRegex = /^[\\s]*(.*?)[\\s]*$/;\n  var match = str.match(trimRegex);\n  return match ? match[0] : match;\n}\n\nfunction convertMetricWithWildcard(metricQuery, metric) {\n  let suffix = getMetricSuffix(metricQuery, metric);\n  return addMQEAlias(suffix, wrapMetric(metric));\n}\n\nfunction getMetricSuffix(metricQuery, metric) {\n  let metricPrefix = metricQuery.replace(/\\./g, '\\\\\\.');\n  let suffixRegex = new RegExp(metricPrefix.replace('*', '(.*)'));\n  let suffix = suffixRegex.exec(metric);\n  return suffix[1];\n}\n\nfunction addMQEAlias(alias, metric) {\n  return metric + \" {\" + alias + \"}\";\n}\n\n// Wrap metric with ``: os.cpu.user -> `os.cpu.user`\nfunction wrapMetric(metric) {\n  return '`' + metric + '`';\n}\n\nfunction wrapTag(tag) {\n  return \"'\" + tag + \"'\";\n}\n\n// Special value formatter for MQE metric.\n// Render multi-value variables for using with metric template:\n// $metric => ('os.cpu.user', 'os.cpu.system')\n// select `$metric` => select `os.cpu.user`, `os.cpu.system`\nfunction formatMQEMetric(value, format, variable) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return value.join(\"`, `\");\n}\n"]}