{"version":3,"sources":["../src/query_builder.js"],"names":["containsWildcard","str","wildcardRegex","test","containsIndex","getAliasIndexArray","replace","trim","indices","split","i","length","parseInt","getMetricSplits","metricSplits","getCustomAliasName","aliasString","index","slice","addFunctions","functions","query","_","forEach","fn","func","convertMetricWithIndex","functionList","metric","suffix","wrapMetric","undefined","addMQEAlias","composeRegex","regex","search","RegExp","filterMetrics","metrics","filterRegex","containsFilter","filter","trimRegex","match","convertMetricWithWildcard","metricQuery","getMetricSuffix","metricPrefix","suffixRegex","exec","alias","wrapTag","tag","formatMQEMetric","value","format","variable","join","MQEQuery","target","templateSrv","scopedVars","metricList","timeFrom","timeTo","interval","m","filteredMetrics","map","partial","compose","addFunctionsWithAlias","addFunctionsToMetric","concat","defaultAlias","uniq","formatValueOriginal","formatValue","renderWhere","apps","hosts","addTimeRange","resultmetric","whereClauses","renderedClauses","clauseObj","rendered","condition","isNumber","containsVariable","column","operator","variables","self","some","timeRangeRegex"],"mappings":"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","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\n\nexport default class MQEQuery {\n\n  /** @ngInject */\n  constructor(target, templateSrv, scopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    // this.templateSrv.formatValue = formatMQEMetric;\n    this.scopedVars = scopedVars;\n  }\n\n  /////////////////////\n  // Query Rendering //\n  /////////////////////\n\n  render(metricList, timeFrom, timeTo, interval) {\n    let target = this.target;\n    let metrics = [];\n\n    for (let m of target.metrics) {\n      let metric = m.metric;\n      if (metric) {\n        if (containsWildcard(metric)) {\n          let filteredMetrics = filterMetrics(metric, metricList);\n\n          // Add alias\n          if (m.alias) {\n            if (containsWildcard(m.alias)) {\n              // Set whildcard part as metric alias\n              // query: os.cpu.* alias: * -> metric: os.cpu.system -> alias: system\n              filteredMetrics = _.map(filteredMetrics,\n                _.partial(convertMetricWithWildcard, target.functionList, metric));\n            } else if(containsIndex(m.alias)){\n              // query: tag1.tag2.* (the  metric can be very lengthy like below)\n              // metric: tag1.tag2.tag3.tag4.tag5.tag6\n              // alias: $6 ie show only tag6\n              var indices = getAliasIndexArray(m.alias);\n              filteredMetrics = _.map(filteredMetrics, _.partial(convertMetricWithIndex, target.functionList, indices));\n            }\n            else {\n              filteredMetrics = _.map(filteredMetrics,\n                _.compose(_.partial(this.addFunctionsWithAlias, target.functionList, m.alias), wrapMetric));\n            }\n          } else {\n            filteredMetrics = _.map(filteredMetrics, _.partial(this.addFunctionsToMetric, target.functionList));\n          }\n\n          metrics = metrics.concat(filteredMetrics);\n        } else {\n          var defaultAlias = metric;\n          metric = wrapMetric(metric);\n          // add functions here for single metric without wildcard\n          // Render functions if any\n          if(target.functionList !== undefined) {\n            if (target.functionList.length !== 0) {\n              metric += addFunctions(target.functionList);\n            }\n          }\n          // Add alias\n          if (m.alias) {\n            metric = addMQEAlias(m.alias, metric);\n          }\n          else {\n            metric = addMQEAlias(defaultAlias, metric);\n          }\n          metrics = metrics.concat(metric);\n        }\n      }\n    }\n    metrics = _.uniq(metrics);\n\n    return _.map(metrics, metric => {\n      let query = \"\";\n\n      // Set custom metric format function\n      let formatValueOriginal = this.templateSrv.formatValue;\n      this.templateSrv.formatValue = formatMQEMetric;\n      metric = this.templateSrv.replace(metric, this.scopedVars);\n\n      // Set original format function\n      this.templateSrv.formatValue = formatValueOriginal;\n\n      query += metric;\n\n      // Render apps and hosts\n      query += this.renderWhere(target.apps, target.hosts);\n\n      query = MQEQuery.addTimeRange(query, timeFrom, timeTo);\n      return query;\n    });\n  }\n\n  addFunctionsWithAlias(functionList, alias, metric) {\n    if(functionList !== undefined) {\n      if (functionList.length !== 0) {\n        metric += addFunctions(functionList);\n      }\n    }\n    var resultmetric =  addMQEAlias(alias, metric);\n    return resultmetric;\n  }\n\n  addFunctionsToMetric(functionList, metric) {\n    let defaultAlias = metric;\n    metric = wrapMetric(metric);\n    if(functionList !== undefined) {\n      if (functionList.length !== 0) {\n        metric += addFunctions(functionList);\n        return addMQEAlias(defaultAlias, metric);\n      }\n    }\n    return metric;\n  }\n\n  renderWhere(apps, hosts) {\n    let query = \"\";\n    if (apps.length || hosts.length) {\n      query += \" where \";\n      if (apps.length) {\n        query += \"app in (\" + _.map(apps, wrapTag).join(', ') + \")\";\n        if (hosts.length)  {\n          query += \" and \";\n        }\n      }\n      if (hosts.length) {\n        query += \"host in (\" + _.map(hosts, wrapTag).join(', ') + \")\";\n      }\n    }\n    return query;\n  }\n\n  renderWhereClauses(whereClauses) {\n    var renderedClauses = _.map(whereClauses, (clauseObj, index) => {\n      var rendered = \"\";\n      if (index !== 0) {\n        rendered += clauseObj.condition + \" \";\n      }\n\n      // Put non-numeric values into quotes.\n      var value;\n      if (_.isNumber(clauseObj.value) ||\n          this.containsVariable(clauseObj.value)) {\n        value = clauseObj.value;\n      } else {\n        value = \"'\" + clauseObj.value + \"'\";\n      }\n      rendered += clauseObj.column + ' ' + clauseObj.operator + ' ' + value;\n      return rendered;\n    });\n    return renderedClauses.join(' ');\n  }\n\n  // Check for template variables\n  containsVariable(str) {\n    var variables = _.map(this.templateSrv.variables, 'name');\n    var self = this;\n    return _.some(variables, variable => {\n      return self.templateSrv.containsVariable(str, variable);\n    });\n  }\n\n  ////////////////////\n  // Static methods //\n  ////////////////////\n\n  static getMetrics() {\n    var query = \"describe all\";\n    return query;\n  }\n\n  static getColumns(metric) {\n    return \"describe \" + metric;\n  }\n\n  static addTimeRange(query, timeFrom, timeTo, interval) {\n    var timeRangeRegex = /from.*to/;\n    if(!timeRangeRegex.test(query)) {\n      query = trim(query) + \" from \" + timeFrom + \" to \" + timeTo;\n    }\n    return query;\n  }\n}\n\nfunction containsWildcard(str) {\n  var wildcardRegex = /[*!]/;\n  return wildcardRegex.test(str);\n}\n\nfunction containsIndex(str) {\n  var wildcardRegex = /\\$(\\d)/g;\n  return wildcardRegex.test(str);\n}\n\nfunction getAliasIndexArray(str) {\n  // replace all the $ with space\n  // convert it to list\n  str = str.replace(/\\$/g, ' ');\n  str = str.trim();\n  var indices = str.split(' ');\n  for(var i=0; i<indices.length; i++) {\n    indices[i] = parseInt(indices[i], 10);\n  }\n  return indices;\n}\n\nfunction getMetricSplits(str) {\n  var metricSplits = str.split('.');\n  return (metricSplits);\n\n}\n\nfunction getCustomAliasName(metricSplits, indices) {\n  var aliasString = \"\";\n  for(var i = 0; i<indices.length; i++) {\n    var index = indices[i]-1;\n    if(index >= 0 && index <  metricSplits.length) {\n      aliasString += metricSplits[indices[i] - 1] + \".\";\n    }\n  }\n  return aliasString.slice(0, -1);\n}\n\nfunction addFunctions(functions){\n  var query = \"\";\n  if (functions.length) {\n    _.forEach(functions, function (fn) {\n      if(fn.func.length !== 0) {\n        query += \"|\" + fn.func + \" \";\n      }\n    });\n  }\n  return query;\n}\n\nfunction convertMetricWithIndex(functionList, indices, metric) {\n  var suffix = getCustomAliasName(getMetricSplits(metric),indices);\n  metric = wrapMetric(metric);\n  if(functionList !== undefined) {\n    if (functionList.length !== 0) {\n      metric += addFunctions(functionList);\n    }\n  }\n\n  return addMQEAlias(suffix, metric);\n}\n\nfunction composeRegex(str){\n  var regex=\"\";\n  var metricSplits = getMetricSplits(str);\n  for(var i = 0; i<metricSplits.length; i++) {\n    if(metricSplits[i].search(/!/g) !== -1) {\n      str = metricSplits[i].replace(/!/g,\"\");\n      regex += \"^(?!.*\"+str;\n    }\n    else if(metricSplits[i].search(/\\*/g) !== -1) {\n      str = metricSplits[i].replace(/\\*/g,\"\");\n      regex += \"(?=.*\"+str;\n    }\n    else {\n      regex += \"(?=.*\"+metricSplits[i];\n    }\n    regex += (i === metricSplits.length-1) ? \")\" : \"\\.)\";\n  }\n  regex = new RegExp(regex);\n  return regex;\n}\n\nfunction filterMetrics(str, metrics) {\n  let filterRegex;\n  var  containsFilter = str.search(/!/);\n\n  if(containsFilter !== -1) {\n    filterRegex = composeRegex(str);\n  }\n  else {\n    str = str.replace(/\\./g, '\\\\\\.');\n    filterRegex = new RegExp(str.replace('*', '.*'), 'g');\n  }\n  return _.filter(metrics, metric => {\n    return metric.search(filterRegex) !== -1;\n  });\n}\n\nfunction trim(str) {\n  var trimRegex = /^[\\s]*(.*?)[\\s]*$/;\n  var match = str.match(trimRegex);\n  return match ? match[0] : match;\n}\n\nfunction convertMetricWithWildcard(functions, metricQuery, metric) {\n  let suffix = getMetricSuffix(metricQuery, metric);\n  metric = wrapMetric(metric);\n\n  // Render functions if any  before add alias\n  if(functions !== undefined) {\n    if (functions.length !== 0) {\n      metric += addFunctions(functions);\n    }\n  }\n  return addMQEAlias(suffix, metric);\n}\n\nfunction getMetricSuffix(metricQuery, metric) {\n  let metricPrefix = metricQuery.replace(/\\./g, '\\\\\\.');\n  let suffixRegex = new RegExp(metricPrefix.replace('*', '(.*)'));\n  let suffix = suffixRegex.exec(metric);\n  return suffix[1];\n}\n\nfunction addMQEAlias(alias, metric) {\n  return metric + \" {\" + alias + \"}\";\n}\n\n// Wrap metric with ``: os.cpu.user -> `os.cpu.user`\nfunction wrapMetric(metric) {\n  return '`' + metric + '`';\n}\n\nfunction wrapTag(tag) {\n  return \"'\" + tag + \"'\";\n}\n\n// Special value formatter for MQE metric.\n// Render multi-value variables for using with metric template:\n// $metric => ('os.cpu.user', 'os.cpu.system')\n// select `$metric` => select `os.cpu.user`, `os.cpu.system`\nfunction formatMQEMetric(value, format, variable) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return value.join(\"`, `\");\n}\n"]}