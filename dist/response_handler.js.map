{"version":3,"sources":["../src/response_handler.js"],"names":["handle_response","target","response","timeseries","_","map","body","series","timerange","datapoints","values","value","index","Number","start","resolution","metric_prefix","tagset","key","addAppToAlias","addHostToAlias","join","name","flatten","handle_explore_response","query","getTagset","tags","forEach","tagValue","tag","push","uniq"],"mappings":";;;;;;;AAEO,WAASA,eAAT,CAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AAChD,QAAIC,aAAaC,EAAEC,GAAF,CAAMH,SAASI,IAAf,EAAqB,UAACA,IAAD,EAAU;AAC9C,aAAOF,EAAEC,GAAF,CAAMC,KAAKC,MAAX,EAAmB,UAACA,MAAD,EAAY;AACpC,YAAIC,YAAYF,KAAKE,SAArB;AACA,YAAIC,aAAaL,EAAEC,GAAF,CAAME,OAAOG,MAAb,EAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACtD,iBAAO,CACLC,OAAOF,KAAP,CADK,EACU;AACfE,iBAAOL,UAAUM,KAAV,GAAkBN,UAAUO,UAAV,GAAuBH,KAAhD,CAFK,CAEmD;AAFnD,WAAP;AAID,SALgB,CAAjB;;AAOA,YAAII,gBAAgBZ,EAAEC,GAAF,CAAME,OAAOU,MAAb,EAAqB,UAACN,KAAD,EAAQO,GAAR,EAAgB;AACvD;AACA,cAAKA,QAAQ,SAAR,IAAqBjB,OAAOkB,aAAP,KAAyB,KAA/C,IACCD,QAAQ,MAAR,IAAkBjB,OAAOmB,cAAP,KAA0B,KADjD,EACyD;AACvD,mBAAOT,KAAP;AACD,WAHD,MAIK;AACH,mBAAO,EAAP;AACD;AACF,SATmB,EASjBU,IATiB,CASZ,GATY,CAApB;;AAWA,eAAO;AACLpB,kBAAQe,gBAAgB,GAAhB,GAAsBV,KAAKgB,IAD9B;AAELb,sBAAYA;AAFP,SAAP;AAID,OAxBM,CAAP;AAyBD,KA1BgB,CAAjB;AA2BA,WAAOL,EAAEmB,OAAF,CAAUpB,UAAV,EAAsB,IAAtB,CAAP;AACD;;6BA7BeH,e;;AA+BT,WAASwB,uBAAT,CAAiCC,KAAjC,EAAwCvB,QAAxC,EAAkD;;AAEvD,aAASwB,SAAT,CAAmBxB,QAAnB,EAA6B;AAC3B,UAAIyB,OAAO,EAAX;AACAvB,QAAEwB,OAAF,CAAU1B,SAASI,IAAT,CAAc,QAAd,CAAV,EAAmC,UAACW,MAAD,EAAY;AAC7Cb,UAAEwB,OAAF,CAAUX,MAAV,EAAkB,UAACY,QAAD,EAAWC,GAAX,EAAmB;AACnC,cAAI,CAACH,KAAKG,GAAL,CAAL,EAAgB;AACdH,iBAAKG,GAAL,IAAY,EAAZ;AACD;AACDH,eAAKG,GAAL,EAAUC,IAAV,CAAeF,QAAf;AACD,SALD;AAMD,OAPD;AAQAzB,QAAEwB,OAAF,CAAUD,IAAV,EAAgB,UAACE,QAAD,EAAWC,GAAX,EAAmB;AACjCH,aAAKG,GAAL,IAAY1B,EAAE4B,IAAF,CAAO5B,EAAEmB,OAAF,CAAUM,QAAV,CAAP,CAAZ;AACD,OAFD;AAGA,aAAOF,IAAP;AACD;;AAED,QAAIF,UAAU,QAAd,EAAwB;AACtB,aAAOC,UAAUxB,QAAV,CAAP;AACD,KAFD,MAGK,IAAIuB,UAAU,SAAd,EAAyB;AAC5B,aAAOC,UAAUxB,QAAV,EAAoB,SAApB,CAAP;AACD,KAFI,MAGA,IAAIuB,UAAU,OAAd,EAAuB;AAC1B,aAAOC,UAAUxB,QAAV,EAAoB,OAApB,CAAP;AACD,KAFI,MAGA;AACH,aAAOA,SAASI,IAAT,CAAcmB,KAAd,CAAP;AACD;AACF;;qCA9BeD,uB;;;;AAjCTpB,O","file":"response_handler.js","sourcesContent":["import _ from 'lodash';\n\nexport function handle_response(target, response) {\n  var timeseries = _.map(response.body, (body) => {\n    return _.map(body.series, (series) => {\n      var timerange = body.timerange;\n      var datapoints = _.map(series.values, (value, index) => {\n        return [\n          Number(value), // value\n          Number(timerange.start + timerange.resolution * index)  // timestamp\n        ];\n      });\n\n      var metric_prefix = _.map(series.tagset, (value, key) => {\n        // Use !== false for backward compatibility\n        if ((key === 'cluster' && target.addAppToAlias !== false) ||\n            (key === 'host' && target.addHostToAlias !== false)) {\n          return value;\n        }\n        else {\n          return '';\n        }\n      }).join(' ');\n\n      return {\n        target: metric_prefix + ' ' + body.name,\n        datapoints: datapoints\n      };\n    });\n  });\n  return _.flatten(timeseries, true);\n}\n\nexport function handle_explore_response(query, response) {\n\n  function getTagset(response) {\n    let tags = {};\n    _.forEach(response.body['tagset'], (tagset) => {\n      _.forEach(tagset, (tagValue, tag) => {\n        if (!tags[tag]) {\n          tags[tag] = [];\n        }\n        tags[tag].push(tagValue);\n      });\n    });\n    _.forEach(tags, (tagValue, tag) => {\n      tags[tag] = _.uniq(_.flatten(tagValue));\n    });\n    return tags;\n  }\n\n  if (query === 'tagset') {\n    return getTagset(response);\n  }\n  else if (query === 'cluster') {\n    return getTagset(response)['cluster'] ;\n  }\n  else if (query === 'hosts') {\n    return getTagset(response)['hosts'] ;\n  }\n  else {\n    return response.body[query];\n  }\n}\n"]}