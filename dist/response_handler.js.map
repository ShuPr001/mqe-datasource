{"version":3,"sources":["../src/response_handler.js"],"names":["handle_response","target","response","timeseries","_","map","body","series","timerange","datapoints","values","value","index","Number","start","resolution","metric_prefix","tagset","key","addAppToAlias","addHostToAlias","join","console","log","name","f","flatten","handle_explore_response","query","getTagset","tags","forEach","tagValue","tag","push","uniq"],"mappings":";;;;;;;AAEO,WAASA,eAAT,CAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AAChD,QAAIC,aAAaC,EAAEC,GAAF,CAAMH,SAASI,IAAf,EAAqB,UAACA,IAAD,EAAU;AAC9C,aAAOF,EAAEC,GAAF,CAAMC,KAAKC,MAAX,EAAmB,UAACA,MAAD,EAAY;AACpC,YAAIC,YAAYF,KAAKE,SAArB;AACA,YAAIC,aAAaL,EAAEC,GAAF,CAAME,OAAOG,MAAb,EAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACtD,iBAAO,CACLC,OAAOF,KAAP,CADK,EACU;AACfE,iBAAOL,UAAUM,KAAV,GAAkBN,UAAUO,UAAV,GAAuBH,KAAhD,CAFK,CAEmD;AAFnD,WAAP;AAID,SALgB,CAAjB;;AAOA,YAAII,gBAAgBZ,EAAEC,GAAF,CAAME,OAAOU,MAAb,EAAqB,UAACN,KAAD,EAAQO,GAAR,EAAgB;AACvD;AACA,cAAKA,QAAQ,KAAR,IAAiBjB,OAAOkB,aAAP,KAAyB,KAA3C,IACCD,QAAQ,MAAR,IAAkBjB,OAAOmB,cAAP,KAA0B,KADjD,EACyD;AACvD,mBAAOT,KAAP;AACD,WAHD,MAIK;AACH,mBAAO,EAAP;AACD;AACF,SATmB,EASjBU,IATiB,CASZ,GATY,CAApB;;AAWAC,gBAAQC,GAAR,CAAY,cAAZ,EAA4BP,gBAAgB,GAAhB,GAAsBV,KAAKkB,IAAvD;AACA,eAAO;AACLvB,kBAAQe,gBAAgB,GAAhB,GAAsBV,KAAKkB,IAD9B;AAELf,sBAAYA;AAFP,SAAP;AAID,OAzBM,CAAP;AA0BD,KA3BgB,CAAjB;;AA6BA,QAAIgB,IAAKrB,EAAEsB,OAAF,CAAUvB,UAAV,EAAsB,IAAtB,CAAT;AACAmB,YAAQC,GAAR,CAAYE,CAAZ;AACA,WAAOA,CAAP;AACD;;6BAjCezB,e;;AAmCT,WAAS2B,uBAAT,CAAiCC,KAAjC,EAAwC1B,QAAxC,EAAkD;;AAEvD,aAAS2B,SAAT,CAAmB3B,QAAnB,EAA6B;AAC3B,UAAI4B,OAAO,EAAX;AACA1B,QAAE2B,OAAF,CAAU7B,SAASI,IAAT,CAAc,QAAd,CAAV,EAAmC,UAACW,MAAD,EAAY;AAC7Cb,UAAE2B,OAAF,CAAUd,MAAV,EAAkB,UAACe,QAAD,EAAWC,GAAX,EAAmB;AACnC,cAAI,CAACH,KAAKG,GAAL,CAAL,EAAgB;AACdH,iBAAKG,GAAL,IAAY,EAAZ;AACD;AACDH,eAAKG,GAAL,EAAUC,IAAV,CAAeF,QAAf;AACD,SALD;AAMD,OAPD;AAQA5B,QAAE2B,OAAF,CAAUD,IAAV,EAAgB,UAACE,QAAD,EAAWC,GAAX,EAAmB;AACjCH,aAAKG,GAAL,IAAY7B,EAAE+B,IAAF,CAAO/B,EAAEsB,OAAF,CAAUM,QAAV,CAAP,CAAZ;AACD,OAFD;AAGA,aAAOF,IAAP;AACD;;AAED,QAAIF,UAAU,QAAd,EAAwB;AACtB,aAAOC,UAAU3B,QAAV,CAAP;AACD,KAFD,MAGK,IAAI0B,UAAU,MAAd,EAAsB;AACzB,aAAOC,UAAU3B,QAAV,EAAoB,KAApB,CAAP;AACD,KAFI,MAGA,IAAI0B,UAAU,OAAd,EAAuB;AAC1B,aAAOC,UAAU3B,QAAV,EAAoB,OAApB,CAAP;AACD,KAFI,MAGA;AACH,aAAOA,SAASI,IAAT,CAAcsB,KAAd,CAAP;AACD;AACF;;qCA9BeD,uB;;;;AArCTvB,O","file":"response_handler.js","sourcesContent":["import _ from 'lodash';\n\nexport function handle_response(target, response) {\n  var timeseries = _.map(response.body, (body) => {\n    return _.map(body.series, (series) => {\n      var timerange = body.timerange;\n      var datapoints = _.map(series.values, (value, index) => {\n        return [\n          Number(value), // value\n          Number(timerange.start + timerange.resolution * index)  // timestamp\n        ];\n      });\n\n      var metric_prefix = _.map(series.tagset, (value, key) => {\n        // Use !== false for backward compatibility\n        if ((key === 'app' && target.addAppToAlias !== false) ||\n            (key === 'host' && target.addHostToAlias !== false)) {\n          return value;\n        }\n        else {\n          return '';\n        }\n      }).join(' ');\n\n      console.log('serie name: ', metric_prefix + ' ' + body.name);\n      return {\n        target: metric_prefix + ' ' + body.name,\n        datapoints: datapoints\n      };\n    });\n  });\n\n  var f =  _.flatten(timeseries, true);\n  console.log(f);\n  return f\n}\n\nexport function handle_explore_response(query, response) {\n\n  function getTagset(response) {\n    let tags = {};\n    _.forEach(response.body['tagset'], (tagset) => {\n      _.forEach(tagset, (tagValue, tag) => {\n        if (!tags[tag]) {\n          tags[tag] = [];\n        }\n        tags[tag].push(tagValue);\n      });\n    });\n    _.forEach(tags, (tagValue, tag) => {\n      tags[tag] = _.uniq(_.flatten(tagValue));\n    });\n    return tags;\n  }\n\n  if (query === 'tagset') {\n    return getTagset(response);\n  }\n  else if (query === 'apps') {\n    return getTagset(response)['App'];\n  }\n  else if (query === 'hosts') {\n    return getTagset(response)['Hosts'];\n  }\n  else {\n    return response.body[query];\n  }\n}\n"]}